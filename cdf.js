// 
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
//
//
//
//   This code was written by a person with very little Web/JS knowledge, don't judge. 
//   https://github.com/quarck/MathGen6th/issues for reporting any issues 
//

function calculateCdfRanges(objs)
{
	let accum_weight = 0
	
	for (let obj of objs)
	{
		obj["cdf_from"] = accum_weight 
		obj["cdf_to"] = accum_weight + obj.weight
		accum_weight += obj.weight
	}
}

function normalizeWeights(objs)
{
	let total_weight = objs.reduce( (acc, obj) => acc + obj.weight, 0.0)
	objs.forEach(obj => obj.weight /= total_weight)
	return objs
}

function assignCdfFlatWeights(objs)
{
	objs.forEach(obj => { obj['weight'] = 1.0 })
    normalizeWeights(objs)
    calculateCdfRanges(objs)
}

function weightedRandomValue(objs)
{
	let rand = Math.random()
	
	for (let obj of objs)
	{
		if (obj.cdf_from <= rand && rand < obj.cdf_to) 
			return obj
	}
	return obj[obj.length -1] // rare case of exact 1.000000000 being generated by the random gen
}

function scaleCdfWeight(obj, factor, objs)
{
    obj.weight *= factor 
    normalizeWeights(objs)
	calculateCdfRanges(objs)
}